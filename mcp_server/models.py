# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:22:15+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Empty(BaseModel):
    pass


class LicenseAssignment(BaseModel):
    etags: Optional[str] = Field(None, description='ETag of the resource.')
    kind: Optional[str] = Field(
        'licensing#licenseAssignment',
        description='Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.',
    )
    productId: Optional[str] = Field(
        None,
        description="A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.",
    )
    productName: Optional[str] = Field(None, description='Display Name of the product.')
    selfLink: Optional[str] = Field(None, description='Link to this page.')
    skuId: Optional[str] = Field(
        None,
        description="A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.",
    )
    skuName: Optional[str] = Field(
        None, description='Display Name of the sku of the product.'
    )
    userId: Optional[str] = Field(
        None,
        description="The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.",
    )


class LicenseAssignmentInsert(BaseModel):
    userId: Optional[str] = Field(None, description='Email id of the user')


class LicenseAssignmentList(BaseModel):
    etag: Optional[str] = Field(None, description='ETag of the resource.')
    items: Optional[List[LicenseAssignment]] = Field(
        None, description='The LicenseAssignments in this page of results.'
    )
    kind: Optional[str] = Field(
        'licensing#licenseAssignmentList',
        description='Identifies the resource as a collection of LicenseAssignments.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The token that you must submit in a subsequent request to retrieve additional license results matching your query parameters. The `maxResults` query string is related to the `nextPageToken` since `maxResults` determines how many entries are returned on each next page.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'
